// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eCbx7HJgm8FWkx1AoTEmGN
// Component: GFq5AX6mQYOS
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import { useScreenVariants as useScreenVariantsyOfg4D6YmtF } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: yOfg4d6Ymt_f/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: eCbx7HJgm8FWkx1AoTEmGN/projectcss
import sty from "./PlasmicOstad.module.css"; // plasmic-import: GFq5AX6mQYOS/css
import untitledDesign3Svg6Mzk9YEiw2If from "./images/untitledDesign3Svg.svg"; // plasmic-import: 6Mzk9yEiw2If/picture
import untitledDesign5SvgYgkPia2Qbqv from "./images/untitledDesign5Svg.svg"; // plasmic-import: Ygk-Pia2Qbqv/picture
import untitledDesign4SvgNa7ZLgE9EyZ from "./images/untitledDesign4Svg.svg"; // plasmic-import: na7z-lgE9eyZ/picture
import untitledDesign6SvgP7GCugyFUh4X from "./images/untitledDesign6Svg.svg"; // plasmic-import: p7gCugyFUh4x/picture

createPlasmicElementProxy;

export const PlasmicOstad__VariantProps = new Array();

export const PlasmicOstad__ArgProps = new Array();

const $$ = {};

function PlasmicOstad__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,
        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsyOfg4D6YmtF()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__smHaA
        )}
      >
        {
          "\u0627\u0633\u0627\u062a\u06cc\u062f\u06cc \u0627\u0632 \u062f\u0627\u0646\u0634\u06af\u0627\u0647\u200c\u0647\u0627\u06cc \u0628\u0631\u062a\u0631 \u0648 \u0635\u0646\u0639\u062a\u060c \u0647\u0645\u0631\u0627\u0647 \u0634\u0645\u0627 \u062f\u0631 \u0645\u0633\u06cc\u0631 \u067e\u06cc\u0634\u0631\u0641\u062a!\n"
        }
      </div>
      {(() => {
        const child$Props = {
          arrows: false,
          autoplay: true,
          autoplaySpeed: 0.1,
          beforeChange: async (...eventArgs) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              "currentSlide",
              ["sliderCarousel", "currentSlide"],
              SliderWrapper_Helpers
            ).apply(null, eventArgs);
          },
          centerMode: true,
          centerPadding: "0",
          className: classNames("__wab_instance", sty.sliderCarousel),
          cssEase: "linear",
          initialSlide: generateStateValueProp($state, [
            "sliderCarousel",
            "currentSlide"
          ]),
          ref: ref => {
            $refs["sliderCarousel"] = ref;
          },
          sliderScopeClassName: sty["sliderCarousel__slider"],
          slidesToShow: hasVariant(globalVariants, "screen", "mobileOnly")
            ? 2.6
            : 3.4,
          speed: 10000
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "currentSlide",
              plasmicStateName: "sliderCarousel.currentSlide"
            }
          ],

          [],
          SliderWrapper_Helpers ?? {},
          child$Props
        );
        return (
          <SliderWrapper
            data-plasmic-name={"sliderCarousel"}
            data-plasmic-override={overrides.sliderCarousel}
            {...child$Props}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___7XnCs)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__wGXy6)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "90px"
                    : "200px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "90px"
                    : "200px"
                }
                src={{
                  src: untitledDesign3Svg6Mzk9YEiw2If,
                  fullWidth: 375,
                  fullHeight: 375,
                  aspectRatio: 1
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wRspA
                )}
              >
                {"\u06a9\u06cc\u0645\u06cc\u0627 \u0634\u06cc\u062e\u06cc"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bol8M
                )}
              >
                {
                  "\u06a9\u0627\u0631\u0634\u0646\u0627\u0633\u06cc \u06a9\u0627\u0645\u067e\u06cc\u0648\u062a\u0631 \u062f\u0627\u0646\u0634\u06af\u0627\u0647 \u0627\u0645\u06cc\u0631\u06a9\u0628\u06cc\u0631\n\u0631\u062a\u0628\u0647 20 \u06a9\u0646\u06a9\u0648\u0631 \u0633\u0631\u0627\u0633\u0631\u06cc\n\u0645\u062f\u0631\u0633 \u0627\u0644\u0645\u067e\u06cc\u0627\u062f \u0631\u06cc\u0627\u0636\u06cc \u0648 \u0647\u0648\u0634 \u0645\u0635\u0646\u0648\u0639\u06cc"
                }
              </div>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox___5PLyi)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__fk0KR)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "90px"
                    : "auto"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "90px"
                    : "200px"
                }
                src={{
                  src: untitledDesign5SvgYgkPia2Qbqv,
                  fullWidth: 375,
                  fullHeight: 375,
                  aspectRatio: 1
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__waUHa
                )}
              >
                {
                  "\u0645\u062d\u0645\u062f\u062c\u0648\u0627\u062f \u0627\u0633\u0644\u0627\u0645\u06cc \u0628\u06cc\u062f\u06af\u0644\u06cc"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ebk1D
                )}
              >
                {
                  "\u06a9\u0627\u0631\u0634\u0646\u0627\u0633\u06cc \u0627\u0631\u0634\u062f \u0627\u0644\u06af\u0648\u0631\u06cc\u062a\u0645 \u0648 \u0645\u062d\u0627\u0633\u0628\u0627\u062a \u062f\u0627\u0646\u0634\u06af\u0627\u0647 \u0634\u0631\u06cc\u0641 \n\u0631\u062a\u0628\u0647 10 \u06a9\u0646\u06a9\u0648\u0631 \u0631\u06cc\u0627\u0636\u06cc \n\u0645\u062f\u0631\u0633 \u0627\u0644\u0645\u067e\u06cc\u0627\u062f \u0631\u06cc\u0627\u0636\u06cc \u0648 \u06a9\u0627\u0645\u067e\u06cc\u0648\u062a\u0631"
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___6G5Qw)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__mrs9V)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "90px"
                    : "auto"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "90px"
                    : "200px"
                }
                src={{
                  src: untitledDesign4SvgNa7ZLgE9EyZ,
                  fullWidth: 375,
                  fullHeight: 375,
                  aspectRatio: 1
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8Ya54
                )}
              >
                {"\u0645\u062d\u0645\u062f \u0686\u0631\u0627\u063a\u06cc"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3SvT
                )}
              >
                {
                  "\u06a9\u0627\u0631\u0634\u0646\u0627\u0633\u06cc \u0627\u0631\u0634\u062f \u0647\u0648\u0634 \u0645\u0635\u0646\u0648\u0639\u06cc \u062f\u0627\u0646\u0634\u06af\u0627\u0647 \u0634\u0631\u06cc\u0641 \n\u0645\u062f\u0627\u0644 \u0646\u0642\u0631\u0647 \u0627\u0644\u0645\u067e\u06cc\u0627\u062f \u0631\u06cc\u0627\u0636\u06cc \n\u0631\u062a\u0628\u0647 1 \u06a9\u0646\u06a9\u0648\u0631 \u0645\u0646\u0637\u0642\u0647 3\u064818 \u06a9\u0634\u0648\u0631"
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__cu9A7)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__nzkas)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "90px"
                    : "auto"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "90px"
                    : "200px"
                }
                src={{
                  src: untitledDesign6SvgP7GCugyFUh4X,
                  fullWidth: 375,
                  fullHeight: 375,
                  aspectRatio: 1
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__a6Sjg
                )}
              >
                {
                  "\u0641\u0627\u0637\u0645\u0647 \u0627\u0639\u0638\u0645\u06cc"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qcwb4
                )}
              >
                {
                  "\u06a9\u0627\u0631\u0634\u0646\u0627\u0633\u06cc \u0645\u0647\u0646\u062f\u0633\u06cc \u0628\u0631\u0642 \u062f\u0627\u0646\u0634\u06af\u0627\u0647 \u0634\u0631\u06cc\u0641\n\u0631\u062a\u0628\u0647 69 \u06a9\u0646\u06a9\u0648\u0631 \u0633\u0631\u0627\u0633\u0631\u06cc\n\u0645\u062f\u0631\u0633 \u0631\u06cc\u0627\u0636\u06cc \u06a9\u0646\u06a9\u0648\u0631 \u0648 \u0627\u0644\u0645\u067e\u06cc\u0627\u062f"
                }
              </div>
            </div>
          </SliderWrapper>
        );
      })()}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "sliderCarousel"],
  sliderCarousel: ["sliderCarousel"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOstad__ArgProps,
          internalVariantPropNames: PlasmicOstad__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOstad__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOstad";
  } else {
    func.displayName = `PlasmicOstad.${nodeName}`;
  }
  return func;
}

export const PlasmicOstad = Object.assign(
  // Top-level PlasmicOstad renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    // Metadata about props expected for PlasmicOstad
    internalVariantProps: PlasmicOstad__VariantProps,
    internalArgProps: PlasmicOstad__ArgProps
  }
);

export default PlasmicOstad;
/* prettier-ignore-end */
