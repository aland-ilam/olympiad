// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eCbx7HJgm8FWkx1AoTEmGN
// Component: 5RgKUHQCNjDa
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: eCbx7HJgm8FWkx1AoTEmGN/projectcss
import sty from "./Plasmicآموزش.module.css"; // plasmic-import: 5RgKUHQCNjDa/css

createPlasmicElementProxy;

export const Plasmicآموزش__VariantProps = new Array();

export const Plasmicآموزش__ArgProps = new Array();

const $$ = {};

function Plasmicآموزش__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      aria-label={``}
      className={classNames(
        projectcss.all,
        projectcss.__wab_text,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
      contextMenu={
        "\u0645\u0646\u062e\u062a\u062e\u062d\u062a\u062e\u0647\u0639\u062a"
      }
      onDrop={async event => {
        const $steps = {};
        $steps["goToآموزشها"] = true
          ? (() => {
              const actionArgs = { destination: `/new-page-2` };
              return (({ destination }) => {
                if (
                  typeof destination === "string" &&
                  destination.startsWith("#")
                ) {
                  document
                    .getElementById(destination.substr(1))
                    .scrollIntoView({ behavior: "smooth" });
                } else {
                  location.assign(destination);
                }
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["goToآموزشها"] != null &&
          typeof $steps["goToآموزشها"] === "object" &&
          typeof $steps["goToآموزشها"].then === "function"
        ) {
          $steps["goToآموزشها"] = await $steps["goToآموزشها"];
        }
      }}
    >
      {"\u0622\u0645\u0648\u0632\u0634 \u0647\u0627"}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: Plasmicآموزش__ArgProps,
          internalVariantPropNames: Plasmicآموزش__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmicآموزش__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic\u0622\u0645\u0648\u0632\u0634";
  } else {
    func.displayName = `Plasmicآموزش.${nodeName}`;
  }
  return func;
}

export const Plasmicآموزش = Object.assign(
  // Top-level Plasmicآموزش renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for Plasmicآموزش
    internalVariantProps: Plasmicآموزش__VariantProps,
    internalArgProps: Plasmicآموزش__ArgProps
  }
);

export default Plasmicآموزش;
/* prettier-ignore-end */
