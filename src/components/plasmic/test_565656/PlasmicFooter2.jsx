// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eCbx7HJgm8FWkx1AoTEmGN
// Component: BFroENaJU506
import * as React from "react";
import {
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: eCbx7HJgm8FWkx1AoTEmGN/projectcss
import sty from "./PlasmicFooter2.module.css"; // plasmic-import: BFroENaJU506/css
import TelegramLogoSvgrepoComSvgIcon from "./icons/PlasmicIcon__TelegramLogoSvgrepoComSvg"; // plasmic-import: 3KAJ5fuo8kHy/icon
import Main4ShadLogoFarsgraphicSvgIcon from "./icons/PlasmicIcon__Main4ShadLogoFarsgraphicSvg"; // plasmic-import: drPbsBVNhdKb/icon

createPlasmicElementProxy;

export const PlasmicFooter2__VariantProps = new Array();

export const PlasmicFooter2__ArgProps = new Array();

const $$ = {};

function PlasmicFooter2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__kgk9E)}
        dir={"rtl"}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"rowWrapper"}
          data-plasmic-override={overrides.rowWrapper}
          hasGap={true}
          className={classNames(projectcss.all, sty.rowWrapper)}
        >
          <div
            data-plasmic-name={"colmn1"}
            data-plasmic-override={overrides.colmn1}
            className={classNames(projectcss.all, sty.colmn1)}
          >
            <h3
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3__v9Qy7
              )}
            >
              {"\u062f\u0631\u0628\u0627\u0631\u0647 \u0645\u0627"}
            </h3>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gq804
              )}
            >
              {
                '"\u0622\u0644\u0646\u062f" \u0628\u0647 \u0645\u0639\u0646\u0627\u06cc \u0627\u0648\u0644\u06cc\u0646 \u067e\u0631\u062a\u0648\u0647\u0627\u06cc \u0646\u0648\u0631 \u0627\u0633\u062a \u0648 \u0645\u0627 \u0628\u0627 \u0647\u0645\u06cc\u0646 \u062f\u06cc\u062f\u06af\u0627\u0647\u060c \u062f\u0631 \u062a\u0644\u0627\u0634\u06cc\u0645 \u062a\u0627 \u0627\u0648\u0644\u06cc\u0646 \u062c\u0631\u0642\u0647\u200c\u0647\u0627\u06cc \u062e\u0644\u0627\u0642\u06cc\u062a \u0648 \u0646\u0648\u0622\u0648\u0631\u06cc \u0631\u0627 \u062f\u0631 \u0630\u0647\u0646 \u062f\u0627\u0646\u0634\u200c\u0622\u0645\u0648\u0632\u0627\u0646 \u0631\u0648\u0634\u0646 \u06a9\u0646\u06cc\u0645.'
              }
            </div>
          </div>
          <div
            data-plasmic-name={"colmn2"}
            data-plasmic-override={overrides.colmn2}
            className={classNames(projectcss.all, sty.colmn2)}
          >
            <h3
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3__bAEgE
              )}
            >
              {"\u0644\u06cc\u0646\u06a9 \u0647\u0627\u06cc \u0645\u0647\u0645"}
            </h3>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___2HnDn
              )}
              onClick={async event => {
                const $steps = {};
                $steps["goToآموزشها"] = true
                  ? (() => {
                      const actionArgs = { destination: `/new-page-2` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          location.assign(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToآموزشها"] != null &&
                  typeof $steps["goToآموزشها"] === "object" &&
                  typeof $steps["goToآموزشها"].then === "function"
                ) {
                  $steps["goToآموزشها"] = await $steps["goToآموزشها"];
                }
              }}
              platform={"react"}
            >
              {"\u0622\u0645\u0648\u0632\u0634 \u0647\u0627"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__nTaQn
              )}
              onClick={async event => {
                const $steps = {};
                $steps["goToآموزشها"] = true
                  ? (() => {
                      const actionArgs = { destination: `/new-page-2` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          location.assign(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToآموزشها"] != null &&
                  typeof $steps["goToآموزشها"] === "object" &&
                  typeof $steps["goToآموزشها"].then === "function"
                ) {
                  $steps["goToآموزشها"] = await $steps["goToآموزشها"];
                }
              }}
              platform={"react"}
            >
              {"\u062f\u0631\u0628\u0627\u0631\u0647 \u0645\u0627"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__l6KXk
              )}
              onClick={async event => {
                const $steps = {};
                $steps["goToتماسباما"] = true
                  ? (() => {
                      const actionArgs = { destination: `/new-page` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          location.assign(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToتماسباما"] != null &&
                  typeof $steps["goToتماسباما"] === "object" &&
                  typeof $steps["goToتماسباما"].then === "function"
                ) {
                  $steps["goToتماسباما"] = await $steps["goToتماسباما"];
                }
              }}
              platform={"react"}
            >
              {"\u062a\u0645\u0627\u0633 \u0628\u0627 \u0645\u0627"}
            </PlasmicLink__>
          </div>
          <div
            data-plasmic-name={"colmn3"}
            data-plasmic-override={overrides.colmn3}
            className={classNames(projectcss.all, sty.colmn3)}
          >
            <h3
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3__cxDtQ
              )}
            >
              {
                "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u062a\u0645\u0627\u0633"
              }
            </h3>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eLcPo
              )}
            >
              {
                "\u0646\u0634\u0627\u0646\u06cc \u0645\u0627 \u062f\u0631 \u062a\u0644\u06af\u0631\u0627\u0645 \u0648 \u0634\u0627\u062f:"
              }
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__uFiDd)}
            >
              <TelegramLogoSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__lz1RT)}
                cursor={"Pointer "}
                onClick={async event => {
                  const $steps = {};
                  $steps["goToHttpsTMeAiOlympiadAland"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: "https://t.me/AI_Olympiad_aland"
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            location.assign(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHttpsTMeAiOlympiadAland"] != null &&
                    typeof $steps["goToHttpsTMeAiOlympiadAland"] === "object" &&
                    typeof $steps["goToHttpsTMeAiOlympiadAland"].then ===
                      "function"
                  ) {
                    $steps["goToHttpsTMeAiOlympiadAland"] = await $steps[
                      "goToHttpsTMeAiOlympiadAland"
                    ];
                  }
                }}
                role={"img"}
              />

              <Main4ShadLogoFarsgraphicSvgIcon
                className={classNames(projectcss.all, sty.svg__b29S3)}
                cursor={"Pointer "}
                onClick={async event => {
                  const $steps = {};
                  $steps["goToHttpsShadIrAiOlympiadAland"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: "https://shad.ir/AI_Olympiad_aland"
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            location.assign(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHttpsShadIrAiOlympiadAland"] != null &&
                    typeof $steps["goToHttpsShadIrAiOlympiadAland"] ===
                      "object" &&
                    typeof $steps["goToHttpsShadIrAiOlympiadAland"].then ===
                      "function"
                  ) {
                    $steps["goToHttpsShadIrAiOlympiadAland"] = await $steps[
                      "goToHttpsShadIrAiOlympiadAland"
                    ];
                  }
                }}
                role={"img"}
              />
            </Stack__>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___3BiCp
              )}
            >
              {
                "\u0627\u06cc\u0645\u06cc\u0644 \u0645\u0627: dotavvab@gmail.com"
              }
            </div>
          </div>
        </Stack__>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "rowWrapper", "colmn1", "colmn2", "colmn3"],
  rowWrapper: ["rowWrapper", "colmn1", "colmn2", "colmn3"],
  colmn1: ["colmn1"],
  colmn2: ["colmn2"],
  colmn3: ["colmn3"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter2__ArgProps,
          internalVariantPropNames: PlasmicFooter2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter2";
  } else {
    func.displayName = `PlasmicFooter2.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter2 = Object.assign(
  // Top-level PlasmicFooter2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    rowWrapper: makeNodeComponent("rowWrapper"),
    colmn1: makeNodeComponent("colmn1"),
    colmn2: makeNodeComponent("colmn2"),
    colmn3: makeNodeComponent("colmn3"),
    // Metadata about props expected for PlasmicFooter2
    internalVariantProps: PlasmicFooter2__VariantProps,
    internalArgProps: PlasmicFooter2__ArgProps
  }
);

export default PlasmicFooter2;
/* prettier-ignore-end */
