// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eCbx7HJgm8FWkx1AoTEmGN
// Component: xdU1aoqgqwBO
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import TextInput from "../../TextInput"; // plasmic-import: cY2EEdveUw_m/component
import Button from "../../Button"; // plasmic-import: 5wVC3rQb102V/component
import CopyrightSocialLanguage from "../../CopyrightSocialLanguage"; // plasmic-import: cesa4aFUYHEX/component
import { useScreenVariants as useScreenVariantsyOfg4D6YmtF } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: yOfg4d6Ymt_f/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: eCbx7HJgm8FWkx1AoTEmGN/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: xdU1aoqgqwBO/css
import EmailIcon from "./icons/PlasmicIcon__Email"; // plasmic-import: ZCVvUIYmCRUZ/icon
import DeliveryIcon from "./icons/PlasmicIcon__Delivery"; // plasmic-import: 5MEK0tE4PAoG/icon
import EnterIcon from "./icons/PlasmicIcon__Enter"; // plasmic-import: gcnOcydnRH5p/icon
import QuestionIcon from "./icons/PlasmicIcon__Question"; // plasmic-import: 0sZqUnlZXdmI/icon

createPlasmicElementProxy;

export const PlasmicFooter__VariantProps = new Array();

export const PlasmicFooter__ArgProps = new Array();

const $$ = {};

function PlasmicFooter__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsyOfg4D6YmtF()
  });
  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__xtBd6)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__yckV2)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qz60Q
            )}
          >
            {"Subscribe"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__o7IZz
            )}
          >
            {
              "Sign up for exclusive offers, original stories, activism, events and more."
            }
          </div>
          <TextInput
            data-plasmic-name={"textInput"}
            data-plasmic-override={overrides.textInput}
            className={classNames("__wab_instance", sty.textInput)}
            onChange={async (...eventArgs) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["textInput", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            placeholder={"Email address..."}
            showStartIcon={true}
            startIcon={
              <EmailIcon
                className={classNames(projectcss.all, sty.svg___67Wsw)}
                role={"img"}
              />
            }
            value={generateStateValueProp($state, ["textInput", "value"]) ?? ""}
          />

          <Button
            className={classNames("__wab_instance", sty.button__qSdxu)}
            colors={"black"}
            submitsForm={true}
          >
            {"Sign me up"}
          </Button>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__uTzZi)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__b53By
            )}
          >
            {"Help"}
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__nw2Q4)}
          >
            <Button
              showStartIcon={true}
              startIcon={
                <DeliveryIcon
                  className={classNames(projectcss.all, sty.svg__bEyNp)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              {"Order status"}
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button___9PmEt)}
              showStartIcon={true}
              startIcon={
                <EnterIcon
                  className={classNames(projectcss.all, sty.svg__seR3V)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pKp1
                )}
              >
                {"Returns and exchanges"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button___6Qfr6)}
              showStartIcon={true}
              startIcon={
                <QuestionIcon
                  className={classNames(projectcss.all, sty.svg__bv1Y4)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6K70
                )}
              >
                {"Help center"}
              </div>
            </Button>
          </Stack__>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__lQvRh)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__a0Hup
            )}
          >
            {"More info"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__qx5O)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__bwklx)}
            >
              <Button submitsForm={true}>{"Gift cards"}</Button>
              <Button
                className={classNames("__wab_instance", sty.button__tzc20)}
                submitsForm={true}
              >
                {"Find a store"}
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button___3QjXb)}
                submitsForm={true}
              >
                {"Careers"}
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button___5OrYf)}
                submitsForm={true}
              >
                {"Sitemap"}
              </Button>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__sD7Zt)}
            >
              <Button
                className={classNames("__wab_instance", sty.button__mj4Jj)}
                submitsForm={true}
              >
                {"Group sales"}
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__c4WRu)}
                submitsForm={true}
              >
                {"Privacy policy"}
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button___1TQ8H)}
                submitsForm={true}
              >
                {"Contact us"}
              </Button>
            </Stack__>
          </div>
        </Stack__>
      </Stack__>
      <CopyrightSocialLanguage
        data-plasmic-name={"copyrightSocialLanguage"}
        data-plasmic-override={overrides.copyrightSocialLanguage}
        className={classNames("__wab_instance", sty.copyrightSocialLanguage)}
      />
    </section>
  );
}

const PlasmicDescendants = {
  root: ["root", "textInput", "copyrightSocialLanguage"],
  textInput: ["textInput"],
  copyrightSocialLanguage: ["copyrightSocialLanguage"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    copyrightSocialLanguage: makeNodeComponent("copyrightSocialLanguage"),
    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
