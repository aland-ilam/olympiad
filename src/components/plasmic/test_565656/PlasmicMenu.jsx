// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eCbx7HJgm8FWkx1AoTEmGN
// Component: Mttan8iX9gCk
import * as React from "react";
import {
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import آموزش from "../../\u0622\u0645\u0648\u0632\u0634"; // plasmic-import: 5RgKUHQCNjDa/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: eCbx7HJgm8FWkx1AoTEmGN/projectcss
import sty from "./PlasmicMenu.module.css"; // plasmic-import: Mttan8iX9gCk/css
import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: rzUu4x84rFcl/icon
import CastForEducation24Dp5F6368Fill0Wght400Grad0Opsz24SvgIcon from "./icons/PlasmicIcon__CastForEducation24Dp5F6368Fill0Wght400Grad0Opsz24Svg"; // plasmic-import: 3gJd8Wu7Nv_u/icon

createPlasmicElementProxy;

export const PlasmicMenu__VariantProps = new Array();

export const PlasmicMenu__ArgProps = new Array();

const $$ = {};

function PlasmicMenu__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <Stack__
      as={PlasmicLink__}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
      onClick={async event => {
        const $steps = {};
        $steps["goToآموزشها"] = true
          ? (() => {
              const actionArgs = { destination: `/new-page-2` };
              return (({ destination }) => {
                if (
                  typeof destination === "string" &&
                  destination.startsWith("#")
                ) {
                  document
                    .getElementById(destination.substr(1))
                    .scrollIntoView({ behavior: "smooth" });
                } else {
                  location.assign(destination);
                }
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["goToآموزشها"] != null &&
          typeof $steps["goToآموزشها"] === "object" &&
          typeof $steps["goToآموزشها"].then === "function"
        ) {
          $steps["goToآموزشها"] = await $steps["goToآموزشها"];
        }
      }}
      platform={"react"}
    >
      {false ? (
        <Icon29Icon
          className={classNames(projectcss.all, sty.svg__ll6Vd)}
          role={"img"}
        />
      ) : null}
      <CastForEducation24Dp5F6368Fill0Wght400Grad0Opsz24SvgIcon
        className={classNames(projectcss.all, sty.svg__tBVzC)}
        role={"img"}
      />

      <آموزش
        data-plasmic-name={"\u0622\u0645\u0648\u0632\u0634"}
        data-plasmic-override={overrides.آموزش}
        className={classNames("__wab_instance", sty.آموزش)}
      />

      {false ? (
        <Icon29Icon
          className={classNames(projectcss.all, sty.svg___7Iz)}
          role={"img"}
        />
      ) : null}
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
        tabIndex={0}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__x5DY
          )}
        >
          {"\u0622\u0632\u0645\u0648\u0646\u200c\u0647\u0627"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__gmxtB
          )}
        >
          {"\u062f\u0648\u0631\u0647\u200c\u0647\u0627"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__z0Cin
          )}
        >
          {"\u0645\u0633\u0627\u0628\u0642\u0627\u062a"}
        </div>
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "\u0622\u0645\u0648\u0632\u0634", "freeBox"],
  آموزش: ["\u0622\u0645\u0648\u0632\u0634"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMenu__ArgProps,
          internalVariantPropNames: PlasmicMenu__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenu";
  } else {
    func.displayName = `PlasmicMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicMenu = Object.assign(
  // Top-level PlasmicMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    آموزش: makeNodeComponent("\u0622\u0645\u0648\u0632\u0634"),
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicMenu
    internalVariantProps: PlasmicMenu__VariantProps,
    internalArgProps: PlasmicMenu__ArgProps
  }
);

export default PlasmicMenu;
/* prettier-ignore-end */
