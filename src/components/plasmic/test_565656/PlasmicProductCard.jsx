// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eCbx7HJgm8FWkx1AoTEmGN
// Component: aHxg7bl3e-Ta
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
  useTrigger
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: 5wVC3rQb102V/component
import Rating from "../../Rating"; // plasmic-import: 7Z3POE_hsQ-0/component
import Price from "../../Price"; // plasmic-import: ZZ1GCBoM8Mtd/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: eCbx7HJgm8FWkx1AoTEmGN/projectcss
import sty from "./PlasmicProductCard.module.css"; // plasmic-import: aHxg7bl3e-Ta/css
import shoe14UaoYyOrkVsQs from "./images/shoe14.png"; // plasmic-import: UaoYyOrkVsQs/picture

createPlasmicElementProxy;

export const PlasmicProductCard__VariantProps = new Array("small");

export const PlasmicProductCard__ArgProps = new Array(
  "tags",
  "children",
  "link",
  "rating",
  "img",
  "dollars",
  "cents"
);

const $$ = {};

function PlasmicProductCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          img: {
            src: shoe14UaoYyOrkVsQs,
            fullWidth: 840,
            fullHeight: 840,
            aspectRatio: undefined
          }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "small",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.small
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        { [sty.rootsmall]: hasVariant($state, "small", "small") }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <PlasmicLink__
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(projectcss.all, projectcss.a, sty.link, {
          [sty.linksmall]: hasVariant($state, "small", "small")
        })}
        href={args.link}
        platform={"react"}
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"256px"}
          displayWidth={"auto"}
          src={args.img}
        />

        {(
          hasVariant($state, "small", "small") && triggers.hover_root
            ? true
            : false
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__z54Fh, {
              [sty.freeBoxsmall__z54Fhb2IZh]: hasVariant(
                $state,
                "small",
                "small"
              )
            })}
          />
        ) : null}
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__y2Lui, {
            [sty.freeBoxsmall__y2Luib2IZh]: hasVariant($state, "small", "small")
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ww2Bl)}>
            {renderPlasmicSlot({
              defaultContents: (
                <Button colors={"lightGray"} size={"small"} submitsForm={true}>
                  {"New"}
                </Button>
              ),

              value: args.tags
            })}
            {renderPlasmicSlot({
              defaultContents: (
                <Rating
                  className={classNames("__wab_instance", sty.rating__eAvcc)}
                />
              ),

              value: args.rating
            })}
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__f1FK)}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vMyJq
                    )}
                  >
                    {"Product name"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8R4Pc
                    )}
                  >
                    {"If you can dream it, you can build it."}
                  </div>
                </React.Fragment>
              ),

              value: args.children
            })}
          </Stack__>
          <Price
            data-plasmic-name={"price"}
            data-plasmic-override={overrides.price}
            cents={renderPlasmicSlot({
              defaultContents: "99",
              value: args.cents
            })}
            className={classNames("__wab_instance", sty.price)}
            dollars={renderPlasmicSlot({
              defaultContents: "88",
              value: args.dollars
            })}
          />
        </Stack__>
      </PlasmicLink__>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "link", "img", "price"],
  link: ["link", "img", "price"],
  img: ["img"],
  price: ["price"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductCard__ArgProps,
          internalVariantPropNames: PlasmicProductCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCard";
  } else {
    func.displayName = `PlasmicProductCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCard = Object.assign(
  // Top-level PlasmicProductCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    price: makeNodeComponent("price"),
    // Metadata about props expected for PlasmicProductCard
    internalVariantProps: PlasmicProductCard__VariantProps,
    internalArgProps: PlasmicProductCard__ArgProps
  }
);

export default PlasmicProductCard;
/* prettier-ignore-end */
